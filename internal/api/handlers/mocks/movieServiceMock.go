// Code generated by MockGen. DO NOT EDIT.
// Source: movie.go
//
// Generated by this command:
//
//	mockgen -source=movie.go -destination=mocks/movieServiceMock.go
//

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	domain "cinema_service/internal/domain"
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockMovieService is a mock of MovieService interface.
type MockMovieService struct {
	ctrl     *gomock.Controller
	recorder *MockMovieServiceMockRecorder
}

// MockMovieServiceMockRecorder is the mock recorder for MockMovieService.
type MockMovieServiceMockRecorder struct {
	mock *MockMovieService
}

// NewMockMovieService creates a new mock instance.
func NewMockMovieService(ctrl *gomock.Controller) *MockMovieService {
	mock := &MockMovieService{ctrl: ctrl}
	mock.recorder = &MockMovieServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieService) EXPECT() *MockMovieServiceMockRecorder {
	return m.recorder
}

// CreateMovie mocks base method.
func (m *MockMovieService) CreateMovie(ctx context.Context, movie *domain.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", ctx, movie)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockMovieServiceMockRecorder) CreateMovie(ctx, movie any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockMovieService)(nil).CreateMovie), ctx, movie)
}

// DeleteMovie mocks base method.
func (m *MockMovieService) DeleteMovie(ctx context.Context, movieID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", ctx, movieID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockMovieServiceMockRecorder) DeleteMovie(ctx, movieID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockMovieService)(nil).DeleteMovie), ctx, movieID)
}

// GetMoviesBySnippet mocks base method.
func (m *MockMovieService) GetMoviesBySnippet(ctx context.Context, snippet string) ([]*domain.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoviesBySnippet", ctx, snippet)
	ret0, _ := ret[0].([]*domain.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoviesBySnippet indicates an expected call of GetMoviesBySnippet.
func (mr *MockMovieServiceMockRecorder) GetMoviesBySnippet(ctx, snippet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoviesBySnippet", reflect.TypeOf((*MockMovieService)(nil).GetMoviesBySnippet), ctx, snippet)
}

// GetMoviesFilter mocks base method.
func (m *MockMovieService) GetMoviesFilter(ctx context.Context, filter string) ([]*domain.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoviesFilter", ctx, filter)
	ret0, _ := ret[0].([]*domain.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoviesFilter indicates an expected call of GetMoviesFilter.
func (mr *MockMovieServiceMockRecorder) GetMoviesFilter(ctx, filter any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoviesFilter", reflect.TypeOf((*MockMovieService)(nil).GetMoviesFilter), ctx, filter)
}

// UpdateMovie mocks base method.
func (m *MockMovieService) UpdateMovie(ctx context.Context, movie *domain.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", ctx, movie)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockMovieServiceMockRecorder) UpdateMovie(ctx, movie any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockMovieService)(nil).UpdateMovie), ctx, movie)
}

// Code generated by MockGen. DO NOT EDIT.
// Source: actor.go
//
// Generated by this command:
//
//	mockgen -source=actor.go -destination=mocks/actorServiceMock.go
//

// Package mock_handlers is a generated GoMock package.
package mock_handlers

import (
	domain "cinema_service/internal/domain"
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockActorService is a mock of ActorService interface.
type MockActorService struct {
	ctrl     *gomock.Controller
	recorder *MockActorServiceMockRecorder
}

// MockActorServiceMockRecorder is the mock recorder for MockActorService.
type MockActorServiceMockRecorder struct {
	mock *MockActorService
}

// NewMockActorService creates a new mock instance.
func NewMockActorService(ctrl *gomock.Controller) *MockActorService {
	mock := &MockActorService{ctrl: ctrl}
	mock.recorder = &MockActorServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockActorService) EXPECT() *MockActorServiceMockRecorder {
	return m.recorder
}

// CreateActor mocks base method.
func (m *MockActorService) CreateActor(ctx context.Context, act *domain.Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateActor", ctx, act)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateActor indicates an expected call of CreateActor.
func (mr *MockActorServiceMockRecorder) CreateActor(ctx, act any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateActor", reflect.TypeOf((*MockActorService)(nil).CreateActor), ctx, act)
}

// DeleteActor mocks base method.
func (m *MockActorService) DeleteActor(ctx context.Context, actorID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteActor", ctx, actorID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteActor indicates an expected call of DeleteActor.
func (mr *MockActorServiceMockRecorder) DeleteActor(ctx, actorID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteActor", reflect.TypeOf((*MockActorService)(nil).DeleteActor), ctx, actorID)
}

// GetActors mocks base method.
func (m *MockActorService) GetActors(ctx context.Context) (map[*domain.Actor][]*domain.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetActors", ctx)
	ret0, _ := ret[0].(map[*domain.Actor][]*domain.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetActors indicates an expected call of GetActors.
func (mr *MockActorServiceMockRecorder) GetActors(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetActors", reflect.TypeOf((*MockActorService)(nil).GetActors), ctx)
}

// UpdateActor mocks base method.
func (m *MockActorService) UpdateActor(ctx context.Context, act *domain.Actor) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateActor", ctx, act)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateActor indicates an expected call of UpdateActor.
func (mr *MockActorServiceMockRecorder) UpdateActor(ctx, act any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateActor", reflect.TypeOf((*MockActorService)(nil).UpdateActor), ctx, act)
}

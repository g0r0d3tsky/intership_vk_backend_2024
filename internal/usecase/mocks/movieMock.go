// Code generated by MockGen. DO NOT EDIT.
// Source: movie.go
//
// Generated by this command:
//
//	mockgen -source=movie.go -destination=mocks/movieMock.go
//

// Package mock_usecase is a generated GoMock package.
package mock_usecase

import (
	domain "cinema_service/internal/domain"
	context "context"
	reflect "reflect"

	uuid "github.com/google/uuid"
	gomock "go.uber.org/mock/gomock"
)

// MockMovieRepo is a mock of MovieRepo interface.
type MockMovieRepo struct {
	ctrl     *gomock.Controller
	recorder *MockMovieRepoMockRecorder
}

// MockMovieRepoMockRecorder is the mock recorder for MockMovieRepo.
type MockMovieRepoMockRecorder struct {
	mock *MockMovieRepo
}

// NewMockMovieRepo creates a new mock instance.
func NewMockMovieRepo(ctrl *gomock.Controller) *MockMovieRepo {
	mock := &MockMovieRepo{ctrl: ctrl}
	mock.recorder = &MockMovieRepoMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockMovieRepo) EXPECT() *MockMovieRepoMockRecorder {
	return m.recorder
}

// CreateMovie mocks base method.
func (m *MockMovieRepo) CreateMovie(ctx context.Context, movie *domain.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateMovie", ctx, movie)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateMovie indicates an expected call of CreateMovie.
func (mr *MockMovieRepoMockRecorder) CreateMovie(ctx, movie any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateMovie", reflect.TypeOf((*MockMovieRepo)(nil).CreateMovie), ctx, movie)
}

// DeleteMovie mocks base method.
func (m *MockMovieRepo) DeleteMovie(ctx context.Context, movieID uuid.UUID) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteMovie", ctx, movieID)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteMovie indicates an expected call of DeleteMovie.
func (mr *MockMovieRepoMockRecorder) DeleteMovie(ctx, movieID any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteMovie", reflect.TypeOf((*MockMovieRepo)(nil).DeleteMovie), ctx, movieID)
}

// GetMovies mocks base method.
func (m *MockMovieRepo) GetMovies(ctx context.Context) ([]*domain.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMovies", ctx)
	ret0, _ := ret[0].([]*domain.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMovies indicates an expected call of GetMovies.
func (mr *MockMovieRepoMockRecorder) GetMovies(ctx any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMovies", reflect.TypeOf((*MockMovieRepo)(nil).GetMovies), ctx)
}

// GetMoviesBySnippet mocks base method.
func (m *MockMovieRepo) GetMoviesBySnippet(ctx context.Context, snippet string) ([]*domain.Movie, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetMoviesBySnippet", ctx, snippet)
	ret0, _ := ret[0].([]*domain.Movie)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetMoviesBySnippet indicates an expected call of GetMoviesBySnippet.
func (mr *MockMovieRepoMockRecorder) GetMoviesBySnippet(ctx, snippet any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetMoviesBySnippet", reflect.TypeOf((*MockMovieRepo)(nil).GetMoviesBySnippet), ctx, snippet)
}

// UpdateMovie mocks base method.
func (m *MockMovieRepo) UpdateMovie(ctx context.Context, movie *domain.Movie) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateMovie", ctx, movie)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateMovie indicates an expected call of UpdateMovie.
func (mr *MockMovieRepoMockRecorder) UpdateMovie(ctx, movie any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateMovie", reflect.TypeOf((*MockMovieRepo)(nil).UpdateMovie), ctx, movie)
}
